// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Made a 16-bit zx
    Widen(in=zx, out=wideZx);
    Widen(in=zy, out=wideZy);

    // zx logic
    // (!zx AND x)

    Not16(in=wideZx, out=notZx);
    And16(a=x, b=notZx, out=x1);

    Not16(in=wideZy, out=notZy);
    And16(a=y, b=notZy, out=y1);

    // nx logic
    // (!x AND nx) OR (x AND !nx)
    Widen(in=nx, out=wideNx);

    Not16(in=x1, out=notX1);
    Not16(in=wideNx, out=notWideNx);

    And16(a=notX1, b=wideNx, out=midX1);
    And16(a=x1, b=notWideNx, out=midX2);

    Or16(a=midX1, b=midX2, out=x2);



    Widen(in=ny, out=wideNy);

    Not16(in=y1, out=noty1);
    Not16(in=wideNy, out=notWideNy);

    And16(a=noty1, b=wideNy, out=midY1);
    And16(a=y1, b=notWideNy, out=midY2);

    Or16(a=midY1, b=midY2, out=y2);


    // f
    // (f AND (x + y)) OR (!f AND (x & y))
    Widen(in=f, out=wideF);

    Not16(in=wideF, out=notWideF);

    Add16(a=x2, b=y2, out=x2Addy2);
    And16(a=x2, b=y2, out=x2Andy2);

    And16(a=wideF, b=x2Addy2, out=midF1);
    And16(a=notWideF, b=x2Andy2, out=midF2);

    Or16(a=midF1, b=midF2, out=subOut);

    // n
    // (n AND !subOut) OR (!n AND subOut)
    Widen(in=no, out=wideN);

    Not16(in=subOut, out=notSubOut);
    Not16(in=wideN, out=notN);

    And16(a=wideN, b=notSubOut, out=midN1);
    And16(a=notN, b=subOut, out=midN2);

    Or16(a=midN1, b=midN2, out=out);
}